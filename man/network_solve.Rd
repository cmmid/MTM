% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/network_functions.R
\name{network_solve}
\alias{network_solve}
\title{General Simulator for Network Populations.}
\usage{
network_solve(
  y = network_build(parms),
  times = NULL,
  func = network_dReedFrost,
  parms,
  ...
)
}
\arguments{
\item{y, }{an \link{igraph} network, the initial state of the population}

\item{times, }{a numeric vector, the times to report the state; cast
to \code{0:as.integer(max(times))}. If \code{NULL} (the default) runs until extinct.}

\item{func, }{an R function, defined as \verb{function(t, y, parms, ...)}, which
returns a graph capturing state changes. The graph must have the same
vertices and edges as in \code{y}, but can have different attributes.}

\item{parms, }{parameters passed to \code{func}.}

\item{..., }{other arguments passed to \code{func}.}
}
\value{
a list of \link{igraph}s, where the list entries correspond to the population
state at time t (e.g. \code{list[[1]]} is the initial network state after introduction)
}
\description{
Simulates a discrete-time transition function on a network,
returning a series of network states
}
\details{
This function takes the Reed Frost model parameters (N, p) and implementation
of the model (set by setupfun, deltafun). Using those, it performs the model
iteration loop, and returns the series networks
}
\examples{
require(MTM)
# guarantee a network with some transmission
set.seed(42)
parms <- list(N = 30, p = 0.1)
ys <- network_solve(
  y = network_build(parms),
  parms = parms
)

network_quickplot(ys[[1]])
network_quickplot(ys[[2]])
network_quickplot(ys[[3]])
network_quickplot(ys[[4]])

}
